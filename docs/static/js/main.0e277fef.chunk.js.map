{"version":3,"sources":["components/team.js","App.js","serviceWorker.js","index.js"],"names":["Team","index","player","currentLastPlayer","name","className","kd","toFixed","App","props","state","players","Tabletop","init","key","simpleSheet","then","data","tabletop","console","log","playerSort","this","sort","a","b","map","newTeam","length","pop","class","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"odAiCeA,EA/BF,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,kBAC7B,OAAIA,EAAkBC,OAASF,EAAOE,KAElC,yBAAKC,UAAU,uBACb,yBAAKA,UAAU,kBACb,0BAAMA,UAAU,kBAAhB,QAAuCJ,EAAQ,GAC/C,0BAAMI,UAAU,oBACZH,EAAOI,GAAKH,EAAkBG,IAAIC,QAAQ,GAD9C,cAIF,yBAAKF,UAAU,kCACb,wBAAIA,UAAU,SACXH,EAAOE,KADV,MACmBD,EAAkBC,QAOzC,yBAAKC,UAAU,uBACb,yBAAKA,UAAU,kBACb,mCAASJ,EAAQ,IAEnB,yBAAKI,UAAU,kCACb,wBAAIA,UAAU,SAASH,EAAOE,SC0EzBI,E,YA7Fb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,QAAS,CACP,CAAEP,KAAM,QAASE,GAAI,KACrB,CAAEF,KAAM,OAAQE,GAAI,KACpB,CAAEF,KAAM,OAAQE,GAAI,IACpB,CAAEF,KAAM,QAASE,GAAI,KACrB,CAAEF,KAAM,OAAQE,GAAI,KACpB,CAAEF,KAAM,MAAOE,GAAI,OATN,E,kFAgBjBM,IAASC,KAAM,CACbC,IAAK,yFACLC,aAAa,IACbC,MAAK,SAASC,EAAMC,GACpBC,QAAQC,IAAIH,Q,0KAWd,IAAMI,EAAaC,KAAKZ,MAAMC,QAAQY,MAAK,SAACC,EAAGC,GAC7C,OAAOA,EAAEnB,GAAKkB,EAAElB,MAGZK,EAAUU,EAAWK,KAAI,SAAAxB,GAC7B,OACE,4BACE,4BAAKA,EAAOE,MACZ,4BAAKF,EAAOI,QAKZqB,EAAUN,EAAWK,KAAI,SAACxB,EAAQD,GACtC,IAAME,EAAoBkB,EAAWA,EAAWO,OAAS,GAIzD,OAFAP,EAAWQ,MAGT,kBAAC,EAAD,CACE5B,MAAOA,EACPC,OAAQA,EACRC,kBAAmBA,OAKzB,OACE,yBAAKE,UAAU,OACb,6BAASyB,MAAM,WACb,yBAAKzB,UAAU,aACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,mCACb,wBAAIA,UAAU,SAAd,WACA,2BAAOyB,MAAM,kCACX,+BACE,4BACE,sCACA,oCAGJ,+BACGnB,QAQb,6BAASmB,MAAM,yBACb,yBAAKzB,UAAU,aACb,wBAAIA,UAAU,SAAd,SAEA,yBAAKyB,MAAM,wBAAwBH,U,GAtF7BI,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.0e277fef.chunk.js","sourcesContent":["import React from 'react';\n\nconst Team = ({ index, player, currentLastPlayer }) => {\n  if (currentLastPlayer.name !== player.name) {\n    return (\n      <div className=\"column is-3 message\">\n        <div className=\"message-header\">\n          <span className=\"is-pulled-left\">Team {index + 1}</span>\n          <span className=\"is-pulled-right\">\n            {(player.kd + currentLastPlayer.kd).toFixed(1)} combined\n          </span>\n        </div>\n        <div className=\"message-body has-text-centered\">\n          <h3 className=\"title\">\n            {player.name} & {currentLastPlayer.name}\n          </h3>\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"column is-3 message\">\n        <div className=\"message-header\">\n          <p>Team {index + 1}</p>\n        </div>\n        <div className=\"message-body has-text-centered\">\n          <h3 className=\"title\">{player.name}</h3>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default Team;\n","import React, { Component } from \"react\";\n\nimport Tabletop from 'tabletop';\n\nimport Team from './components/team';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      players: [\n        { name: \"Damon\", kd: 2.9 },\n        { name: \"Guru\", kd: 1.2 },\n        { name: \"Klip\", kd: 0.8 },\n        { name: \"Tommy\", kd: 2.2 },\n        { name: \"John\", kd: 3.2 },\n        { name: \"cyn\", kd: 1.4 }\n      ]\n    };\n  }\n\n  componentWillMount() {\n    // could do something like pull state from API\n    Tabletop.init( {\n      key: '2PACX-1vQ2LywYv9ZCcEj-BbFUtsn9DEQF5MxwDl5oUEADMHxEl2KhzqiqZRX6gua6NAv2Y7zrQ_j2ohtu-q9v',\n      simpleSheet: true }\n    ).then(function(data, tabletop) { \n      console.log(data)\n    })\n  }\n\n  componentDidMount() {}\n\n  componentWillUnmount() {}\n\n  componentDidUpdate() {}\n\n  render() {\n    const playerSort = this.state.players.sort((a, b) => {\n      return b.kd - a.kd;\n    });\n\n    const players = playerSort.map(player => {\n      return (\n        <tr>\n          <td>{player.name}</td>\n          <td>{player.kd}</td>\n        </tr>\n      );\n    });\n\n    const newTeam = playerSort.map((player, index) => {\n      const currentLastPlayer = playerSort[playerSort.length - 1];\n\n      playerSort.pop();\n\n      return (\n        <Team\n          index={index}\n          player={player}\n          currentLastPlayer={currentLastPlayer}\n        />\n      );\n    });\n\n    return (\n      <div className=\"App\">\n        <section class=\"section\">\n          <div className=\"container\">\n            <div className=\"columns is-centered\">\n              <div className=\"column is-7-tablet is-6-desktop\">\n                <h2 className=\"title\">Players</h2>\n                <table class=\"table is-bordered is-fullwidth\">\n                  <thead>\n                    <tr>\n                      <th>Player</th>\n                      <th>KD</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {players}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        <section class=\"section teams-section\">\n          <div className=\"container\">\n            <h2 className=\"title\">Teams</h2>\n\n            <div class=\"columns is-multiline\">{newTeam}</div>\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}